{% import '_includes/forms' as forms %}
{% from 'critter/macros' import configWarning, configGroupWarning %}

{# whether or not allowAdminChanges is on #}
{% set readOnly = readOnly ?? false %}

<div class="critter-info-block critter-info-block--info">
    <p>To get your criticalcss.com API key:</p>
    <ol>
        <li>Sign up at <a href="https://criticalcss.com/signup" target="_blank">criticalcss.com/signup</a>.</li>
        <li>Choose the 'Wordpress' plan (this gives you API access; it's not just for Wordpress).</li>
        <li>Complete payment and log in to your account.</li>
        <li>Go to <a href="https://criticalcss.com/account/api-keys" target="_blank">Account â†’ API Keys</a>.</li>
        <li>Copy your API key and save it as an environment variable.</li>
        <li>Add your environment variable below.</li>
        <li>ðŸŽ‰</li>
    </ol>
</div>

{{ forms.autosuggestField({
    label: "API Key"|t(craft.critter.pluginHandle),
    instructions: "The API key for your criticalcss.com account."|t(craft.critter.pluginHandle),
    suggestEnvVars: true,
    suggestAliases: true,
    name: 'apiKey',
    value: settings.generatorSettings.apiKey ?? generator.apiKey,
    required: true,
    disabled: readOnly,
    code: true,
    errors: generator.getErrors('apiKey'),
}) }}

{% if generator.hasWarnings('apiKey') %}
    {% for warning in generator.getWarnings('apiKey') %}
        <p class="warning">{{ warning }}</p>
    {% endfor %}
{% endif %}

{{ forms.textField({
    label: "Max Attempts"|t(craft.critter.pluginHandle),
    instructions: "The maximum number of times to poll the API for results before giving up."|t(craft.critter.pluginHandle),
    name: 'maxAttempts',
    value: settings.generatorSettings.maxAttempts ?? generator.maxAttempts,
    type: 'number',
    min: 1,
    max: 50,
    disabled: readOnly,
    errors: generator.getErrors('maxAttempts'),
}) }}

{{ forms.textField({
    label: "Attempt Delay"|t(craft.critter.pluginHandle),
    instructions: "The number of seconds to wait between each polling attempt."|t(craft.critter.pluginHandle),
    name: 'attemptDelay',
    value: settings.generatorSettings.attemptDelay ?? generator.attemptDelay,
    type: 'number',
    min: 1,
    max: 30,
    disabled: readOnly,
    errors: generator.getErrors('attemptDelay'),
}) }}

{{ forms.textField({
    label: "Viewport Width"|t(craft.critter.pluginHandle),
    instructions: "The viewport width in pixels for critical CSS generation."|t(craft.critter.pluginHandle),
    name: 'width',
    value: settings.generatorSettings.width ?? generator.width,
    type: 'number',
    min: 320,
    max: 3840,
    disabled: readOnly,
    errors: generator.getErrors('width'),
}) }}

{{ forms.textField({
    label: "Viewport Height"|t(craft.critter.pluginHandle),
    instructions: "The viewport height in pixels for critical CSS generation."|t(craft.critter.pluginHandle),
    name: 'height',
    value: settings.generatorSettings.height ?? generator.height,
    type: 'number',
    min: 240,
    max: 2160,
    disabled: readOnly,
    errors: generator.getErrors('height'),
}) }}

{{ config.generatorSettings is defined ? configGroupWarning('generatorSettings') }}
