{% import '_includes/forms' as forms %}
{% from 'critter/macros' import configWarning, configGroupWarning %}

{# whether or not allowAdminChanges is on #}
{% set readOnly = readOnly ?? false %}

<div class="critter-info-block critter-info-block--info">

    <p>‚ö†Ô∏è Configuring Puppeteer and @plone/critical-css-cli involves advanced setup and should be handled by someone familiar with development operations and security best practices.</p>

    <p>To set up @plone/critical-css-cli:</p>
    <ol>
        <li>
            Install <a href="https://github.com/plone/critical-css-cli" target="_blank">@plone/critical-css-cli</a> via npm:
            <pre><code>npm install @plone/critical-css-cli</code></pre>
        </li>
        <li>
            Install any dependencies required by puppeteer.
        </li>
        <li>
            Ensure the package is accessible in your project.
        </li>
        <li>
            Configure the executable paths below.
        </li>
        <li>üéâ</li>
    </ol>
</div>

<h3>{{ "Security Configuration"|t(craft.critter.pluginHandle) }}</h3>
<p class="warning">{{ "Warning: Executable paths should be configured carefully as they can pose security risks if misconfigured. For production environments, consider using environment variables."|t(craft.critter.pluginHandle) }}</p>

{{ forms.autosuggestField({
    label: "Node.js Executable Path"|t(craft.critter.pluginHandle),
    instructions: "Path to the Node.js executable. For security, consider using environment variables. Defaults to 'node' if not specified."|t(craft.critter.pluginHandle),
    suggestEnvVars: true,
    suggestAliases: true,
    name: 'nodeExecutable',
    value: settings.generatorSettings.nodeExecutable ?? generator.nodeExecutable,
    placeholder: 'node',
    disabled: readOnly,
    code: true,
    errors: generator.getErrors('nodeExecutable'),
}) }}

{% if generator.hasWarnings('nodeExecutable') %}
    {% for warning in generator.getWarnings('nodeExecutable') %}
        <p class="warning has-icon">
            <span class="icon" aria-hidden="true"></span>
            <span class="visually-hidden">Warning: </span><span>{{ warning }}</span>
        </p>
    {% endfor %}
{% endif %}

{{ forms.autosuggestField({
    label: "Package Executable Path"|t(craft.critter.pluginHandle),
    instructions: "Path to the @plone/critical-css-cli package. For security, consider using environment variables. Defaults to 'node_modules/@plone/critical-css-cli' if not specified."|t(craft.critter.pluginHandle),
    suggestEnvVars: true,
    suggestAliases: true,
    name: 'packageExecutable',
    value: settings.generatorSettings.packageExecutable ?? generator.packageExecutable,
    placeholder: 'node_modules/@plone/critical-css-cli',
    disabled: readOnly,
    code: true,
    errors: generator.getErrors('packageExecutable'),
}) }}

{% if generator.hasWarnings('packageExecutable') %}
    {% for warning in generator.getWarnings('packageExecutable') %}
        <p class="warning has-icon">
            <span class="icon" aria-hidden="true"></span>
            <span class="visually-hidden">Warning: </span><span>{{ warning }}</span>
        </p>
    {% endfor %}
{% endif %}

<hr>

<h3>{{ "Generation Settings"|t(craft.critter.pluginHandle) }}</h3>

{{ forms.textField({
    label: "Timeout"|t(craft.critter.pluginHandle),
    instructions: "The timeout in seconds for the critical CSS generation process."|t(craft.critter.pluginHandle),
    name: 'timeout',
    value: settings.generatorSettings.timeout ?? generator.timeout,
    type: 'number',
    min: 10,
    max: 300,
    disabled: readOnly,
    errors: generator.getErrors('timeout'),
}) }}

{{ forms.textField({
    label: "Viewport Width"|t(craft.critter.pluginHandle),
    instructions: "The viewport width in pixels for critical CSS generation."|t(craft.critter.pluginHandle),
    name: 'width',
    value: settings.generatorSettings.width ?? generator.width,
    type: 'number',
    min: 320,
    max: 3840,
    disabled: readOnly,
    errors: generator.getErrors('width'),
}) }}

{{ forms.textField({
    label: "Viewport Height"|t(craft.critter.pluginHandle),
    instructions: "The viewport height in pixels for critical CSS generation."|t(craft.critter.pluginHandle),
    name: 'height',
    value: settings.generatorSettings.height ?? generator.height,
    type: 'number',
    min: 240,
    max: 2160,
    disabled: readOnly,
    errors: generator.getErrors('height'),
}) }}

{{ config.generatorSettings is defined ? configGroupWarning('generatorSettings') }}
