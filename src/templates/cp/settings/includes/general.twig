{% import '_includes/forms' as forms %}
{% from 'critter/macros' import configWarning %}

{{ forms.lightswitchField({
    label: "Auto Render Enabled"|t(pluginHandle),
    instructions: "Enable or disable automatic rendering of critical CSS on site requests"|t(pluginHandle),
    warning: config.autoRenderEnabled is defined ? configWarning('autoRenderEnabled'),
    name: 'settings[autoRenderEnabled]',
    on: settings.autoRenderEnabled,
    disabled: readOnly,
}) }}

{{ forms.selectField({
    label: "On Entry Save Behaviour"|t(pluginHandle),
    instructions: "Choose what happens when an entry is saved.\n<strong>Do Nothing</strong>: Critical CSS remains cached and unchanged.\n<strong>Expire Related Critical CSS</strong>: Marks the cached Critical CSS as expired (cached data is preserved but will be regenerated on next request)."|t(pluginHandle),
    warning: config.onEntrySaveBehaviour is defined ? configWarning('onEntrySaveBehaviour') : null,
    name: 'settings[onEntrySaveBehaviour]',
    options: entrySaveBehaviourOptions,
    value: settings.onEntrySaveBehaviour ?? 'expireRelatedCss',
    disabled: readOnly,
}) }}

{{ forms.selectField({
    label: "Regenerate Expired CSS"|t(pluginHandle),
    instructions: "Choose how expired Critical CSS is regenerated.\n<strong>Manually</strong>: Expired CSS is not automatically regenerated - use cronjobs or manual regeneration.\n<strong>Regenerate on next request</strong>: When expired CSS is requested, automatically trigger regeneration."|t(pluginHandle),
    warning: config.regenerateExpiredCss is defined ? configWarning('regenerateExpiredCss') : null,
    name: 'settings[regenerateExpiredCss]',
    options: regenerateExpiredCssOptions,
    value: settings.regenerateExpiredCss ?? 'manually',
    disabled: readOnly,
}) }}

{{ forms.editableTableField({
    label: "Style Tag Attributes"|t(pluginHandle),
    instructions:  "Define attributes to be added to the critical css style tag rendered by the plugin"|t(pluginHandle),
    warning: (config.styleTagAttributes is defined ? configWarning('styleTagAttributes')),
    name: 'settings[styleTagAttributes]',
    cols: {
        enabled: {
            type: 'lightswitch',
            value: true,
            thin: true,
        },
        key: {
            type: 'singleline',
            heading: 'Key'|t(pluginHandle),
            placeholder: "Enter a key"|t(pluginHandle),
            code: true,
        },
        value: {
            type: 'singleline',
            heading: 'Value'|t(pluginHandle),
            placeholder: "Enter a value"|t(pluginHandle),
            code: true,
        },
    },
    rows: settings.styleTagAttributes,
    addRowLabel: "Add attribute"|t(pluginHandle),
    allowAdd: true,
    allowDelete: true,
    allowReorder: true,
    disabled: readOnly,
}) }}

{{ forms.editableTableField({
    label: "Unique Query Parameters"|t(pluginHandle),
    instructions:  "Requests with these query parameters will be treated as unique pages, so will have separate critical CSS"|t(pluginHandle),
    warning: (config.uniqueQueryParams is defined ? configWarning('uniqueQueryParams')),
    name: 'settings[uniqueQueryParams]',
    cols: {
        enabled: {
            type: 'lightswitch',
            value: true,
            thin: true,
        },
        param: {
            type: 'singleline',
            heading: 'Parameter'|t(pluginHandle),
            placeholder: "Enter a parameter"|t(pluginHandle),
            code: true,
        },
    },
    rows: settings.uniqueQueryParams,
    addRowLabel: "Add parameter"|t(pluginHandle),
    allowAdd: true,
    allowDelete: true,
    allowReorder: true,
    disabled: readOnly,
}) }}

{{ forms.autosuggestField({
    label: "Base URL Override"|t(craft.critter.pluginHandle),
    instructions: "An optional replacement base URL for generating critical CSS. This can be useful for testing or staging environments."|t(craft.critter.pluginHandle),
    warning: config.baseUrlOverride is defined ? configWarning('baseUrlOverride') : null,
    suggestEnvVars: true,
    suggestAliases: true,
    name: 'settings[baseUrlOverride]',
    value: settings.baseUrlOverride ?? null,
    required: false,
    disabled: readOnly,
    code: true
}) }}

{% if settings.useGeneratedFallbackCss and settings.fallbackCssEntryId %}
    {% set fallbackEntry = craft.entries.id(settings.fallbackCssEntryId).one() %}
    <div class="field">
        <div class="heading">
            <label>{{ "Generated Fallback CSS"|t(pluginHandle) }}</label>
        </div>
        <div class="input">
            <div class="notice">
                <p><strong>{{ "Currently using generated fallback CSS"|t(pluginHandle) }}</strong></p>
                {% if fallbackEntry %}
                    <p>{{ "Generated from entry: {title}"|t(pluginHandle, {title: fallbackEntry.title}) }}</p>
                {% endif %}
                <p>{{ "To generate new fallback CSS or disable this option, use the Utilities page."|t(pluginHandle) }}</p>
            </div>
        </div>
    </div>
{% endif %}

{{ forms.autosuggestField({
    label: "Fallback CSS File Path"|t(pluginHandle),
    instructions: "Path to a CSS file to use as fallback when no critical CSS is cached. This will be used as a secondary fallback if generated fallback CSS is enabled but not available. For security, only .css files within the storage directory are allowed. Files are limited to 1MB in size. Environment variables are supported."|t(pluginHandle),
    warning: config.fallbackCssFilePath is defined ? configWarning('fallbackCssFilePath') : null,
    suggestEnvVars: true,
    suggestAliases: true,
    name: 'settings[fallbackCssFilePath]',
    value: settings.fallbackCssFilePath ?? null,
    required: false,
    disabled: readOnly,
    code: true,
    placeholder: "@storage/fallback.css"|t(pluginHandle)
}) }}

{{ forms.selectField({
    label: "Default Mode"|t(pluginHandle),
    instructions: "The default mode to use when generating critical CSS.\n<strong>Entry mode</strong>: Critical CSS is generated for each unique URL.\n<strong>Section mode</strong>: Critical CSS is generated once for the entire section."|t(pluginHandle),
    warning: (config.defaultMode is defined ? configWarning('defaultMode')),
    name: 'settings[defaultMode]',
    options: defaultModeOptions,
    value: settings.defaultMode,
    disabled: readOnly,
}) }}

{{ forms.textField({
    label: "Max Retries"|t(pluginHandle),
    instructions: "The maximum number of times to retry failed jobs (mutex locks, network issues, etc.)."|t(pluginHandle),
    warning: config.maxRetries is defined ? configWarning('maxRetries') : null,
    name: 'settings[maxRetries]',
    value: settings.maxRetries ?? 3,
    type: 'number',
    min: 0,
    max: 10,
    disabled: readOnly,
}) }}

{{ forms.textField({
    label: "Retry Base Delay"|t(pluginHandle),
    instructions: "The base delay in seconds for exponential backoff between retries."|t(pluginHandle),
    warning: config.retryBaseDelay is defined ? configWarning('retryBaseDelay') : null,
    name: 'settings[retryBaseDelay]',
    value: settings.retryBaseDelay ?? 30,
    type: 'number',
    min: 1,
    max: 300,
    disabled: readOnly,
}) }}

{{ forms.lightswitchField({
    label: "Enable Debug Logging"|t(pluginHandle),
    instructions: "When enabled, Critter will log detailed debug information to storage/logs/critter.log. This includes generation progress, cache operations, and detailed error information. Only enable this for troubleshooting as it can generate large log files."|t(pluginHandle),
    warning: config.enableDebugLogging is defined ? configWarning('enableDebugLogging') : null,
    name: 'settings[enableDebugLogging]',
    on: settings.enableDebugLogging ?? false,
    disabled: readOnly,
}) }}
